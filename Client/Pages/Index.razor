@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavManager
@implements IAsyncDisposable
@inject HttpClient Http

<MudContainer Width="50%">
    <MudTextField Label="Username" class="mx-2 mt-2" Margin="Margin.Dense"
                  Variant="Variant.Text" @bind-Value="userInput"></MudTextField>
    <MudTextField Label="Message" class="mx-2"
                  Variant="Variant.Text" @bind-Value="messageInput"></MudTextField>
    <MudButton Variant="Variant.Outlined" Class="my-5" @onclick="Send" disabled="@(IsConnected == false)">Send</MudButton>
</MudContainer>

<hr />

<MudContainer Width="50%" >
    @foreach (string message in messages)
    {
        <MudText>@message</MudText>
    }
</MudContainer>




@code {
    private HubConnection? hubConnection;
    private List<string> messages = new();
    private string? userInput;
    private string? messageInput;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavManager.ToAbsoluteUri("/chathub"))
            .WithAutomaticReconnect()
            .Build();

        hubConnection.On<string, string>("RecieveMessage", (user, message) =>
        {
            var formattedMessage = $"{user}: {message}";
            messages.Add(formattedMessage);
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
    }

    private async Task Send()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("SendMessage", userInput, messageInput);
        }
    }

    public bool IsConnected => hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}

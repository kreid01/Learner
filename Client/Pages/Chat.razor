@page "/chat/{id:int}"
@using Learner.Client.Services
@using Learner.Shared.Models;
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavManager
@implements IAsyncDisposable
@inject IChatService ChatService
@inject IMessageService MessageService
@inject HttpClient Http

<AuthorizeView>
    <Authorized>
        <div class="h-[95vh]">

            <div class="border-r-[1px] border-indigo-800 h-[87vh] w-[70vw] mr-auto">
                <div class="border-b-[1px] pt-4 border-indigo-800 pl-5"><h1 class=" text-black my-[10px] font-bold text-3xl"># @chat.Title</h1></div>
                <div class="flex h-[80vh] flex-col-reverse overflow-y-scroll border-b-[1px] border-b-indigo-800">
                    @foreach (NewMessage message in messages)
                    {
                        <div class="p-2 pl-5 text-2xl text-black">
                            <div class="flex">
                                <img class="w-10 h-10 rounded-circle" src="https://cdn-icons-png.flaticon.com/512/149/149071.png" alt="" />
                                <div class="ml-3 flex ">
                                    <p class="font-bold -mt-1">@message.name</p>
                                    <p class="ml-3 text-sm text-gray-300">Now</p>
                                </div>
                            </div>
                            <p class="ml-[52px] -mt-2">@message.message</p>
                        </div>
                    }
                    @foreach (Message message in oldMessages)
                    {
                        <div class="p-2 pl-5 text-2xl text-black">
                            <div class="flex">
                                <img class="w-10 h-10 rounded-circle" src="https://cdn-icons-png.flaticon.com/512/149/149071.png" alt="" />
                                <div class="ml-3 flex ">
                                    <p class="font-bold -mt-1">@message.PosterName</p>
                                    <p class="ml-3 text-sm text-gray-300">@message.CreatedDate.Substring(0,16)</p>
                                </div>
                            </div>
                            <p class="ml-[53px] -mt-2">@message.Content</p>
                        </div>
                    }
                </div>
            </div>

            <div class="flex px-2 w-[70vw] bg-white border-r-[1px] border-indigo-800">
                <MudTextField FullWidth=false Label="Message" class="px-2 bg-white w-[60vw] text-white"
                              Variant="Variant.Text" @bind-Value="messageInput"></MudTextField>
                <div class="m-2 mr-4">
                    <MudButton Variant="Variant.Outlined" Style="@($"background:{Colors.Purple.Lighten1}")"
                               EndIcon="@Icons.Material.Filled.Send" Class="text-white" @onclick="(() => Send(context.User.Identity.Name))"
                               disabled="@(IsConnected == false)">Send</MudButton>
                </div>
            </div>
        </div>
    </Authorized>
    <NotAuthorized>
        <MudContainer>
            <div class="text-2xl font-bold text-black -ml-[17vw] w-96">To  see messages, you must be a logged in use. You are not logged in. </div>
        </MudContainer>
    </NotAuthorized>
</AuthorizeView>





@code {
    private HubConnection? hubConnection;
    private List<NewMessage> messages = new();
    private string? messageInput;

    [Parameter]
    public int Id { get; set; }
    public List<Message> oldMessages = new();

    Learner.Shared.Models.Chat chat = new();

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavManager.ToAbsoluteUri("/chathub"))
            .WithAutomaticReconnect()
            .Build();

        hubConnection.On<NewMessage>("RecieveMessage", (recievedMessage) =>
        {
            if (recievedMessage.chatId == Id)
            {
                messages.Add(recievedMessage);
                InvokeAsync(StateHasChanged);
            }
        });

        await hubConnection.StartAsync();


    }

    protected override async Task OnParametersSetAsync()
    {
        if (Id != null)
        {
            chat = await ChatService.GetChat(Id);
            messages = new List<NewMessage>();
            oldMessages = await MessageService.GetChatMessages(Id);
        }
    }

    private async Task Send(string name)
    {
        var newMessage = new DTOs.PostMessageDto();
        newMessage.PosterName = name;
        newMessage.Content = messageInput;
        newMessage.ChatId = Id;

        var sentMessage = new NewMessage();

        sentMessage.message = messageInput;
        sentMessage.name = name;
        sentMessage.chatId = Id;

        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("SendMessage", sentMessage);
        }

        await MessageService.PostMessage(newMessage);
        messageInput = "";

    }


    public bool IsConnected => hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}
